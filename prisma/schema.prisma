// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Variant {
  id               String             @id @default(cuid())
  name             String
  type             String // color, size, etc
  price            Int?
  imageSrc         String?
  imageAlt         String?
  product          Product            @relation(fields: [productId], references: [id])
  productId        String
  VariantsOnOrders VariantsOnOrders[]
}

model Product {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String?
  price       Float?
  weight      Int?
  description String?
  isActive    Boolean   @default(true)
  variants    Variant[]
  images      Images[]
}

// model Categories {
//   id       String    @id @default(cuid())
//   name     String
//   products Product[]
// }

model Order {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  name             String
  phone            String
  address          String
  address2         String?
  city             String
  state            String
  postalCode       String
  country          String
  status           String             @default("pending")
  totalPrice       Int?               @default(0)
  count            Int?               @default(autoincrement())
  VariantsOnOrders VariantsOnOrders[]
}

model ProductsOnOrder {
  id String @id @default(cuid())
}

model VariantsOnOrders {
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String // relation scalar field (used in the `@relation` attribute above)
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String // relation scalar field (used in the `@relation` attribute above)
  quantity  Int

  @@id([variantId, orderId])
}

model Images {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  src       String
  alt       String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Settings {
  id    String @id @default(cuid())
  name  String @unique
  value String
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
